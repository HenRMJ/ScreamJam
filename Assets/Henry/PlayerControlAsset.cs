//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Henry/PlayerControlAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControlAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControlAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlAsset"",
    ""maps"": [
        {
            ""name"": ""Table"",
            ""id"": ""2ab276f9-588c-4866-b26e-f40dd625c458"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""367b4eb8-50f9-4ea4-bd59-0526ed71d88d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b86ccef3-1737-446b-b52d-f8698aff4c04"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed9820a7-6d89-48bc-bee1-550c45f8a761"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Table
        m_Table = asset.FindActionMap("Table", throwIfNotFound: true);
        m_Table_Look = m_Table.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Table
    private readonly InputActionMap m_Table;
    private List<ITableActions> m_TableActionsCallbackInterfaces = new List<ITableActions>();
    private readonly InputAction m_Table_Look;
    public struct TableActions
    {
        private @PlayerControlAsset m_Wrapper;
        public TableActions(@PlayerControlAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Table_Look;
        public InputActionMap Get() { return m_Wrapper.m_Table; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TableActions set) { return set.Get(); }
        public void AddCallbacks(ITableActions instance)
        {
            if (instance == null || m_Wrapper.m_TableActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TableActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(ITableActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(ITableActions instance)
        {
            if (m_Wrapper.m_TableActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITableActions instance)
        {
            foreach (var item in m_Wrapper.m_TableActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TableActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TableActions @Table => new TableActions(this);
    public interface ITableActions
    {
        void OnLook(InputAction.CallbackContext context);
    }
}
